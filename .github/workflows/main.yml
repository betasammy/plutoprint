name: Build and Upload to PyPI

on: [push, pull_request]

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install -U pip build
          python -m build --sdist -Csetup-args=-Dsdist=true

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: ./dist/*.tar.gz

  build_manylinux_2_28_x86_64_image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        run: |
          docker build -f docker/manylinux_2_28_x86_64.Dockerfile -t ghcr.io/${{ github.repository_owner }}/plutoprint-manylinux_2_28_x86_64:latest .
          docker push ghcr.io/${{ github.repository_owner }}/plutoprint-manylinux_2_28_x86_64:latest

  build_linux_wheels:
    needs: [build_manylinux_2_28_x86_64_image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BUILD: |
            cp310-manylinux_x86_64
            cp311-manylinux_x86_64
            cp312-manylinux_x86_64
            cp313-manylinux_x86_64
            cp314-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/${{ github.repository_owner }}/plutoprint-manylinux_2_28_x86_64:latest
          CIBW_BEFORE_BUILD_LINUX: >
            pip install auditwheel
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
          CIBW_TEST_COMMAND: >
            python -c "import plutoprint; print(plutoprint.__build_info__)"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-linux-wheels
          path: ./wheelhouse/*.whl

  build_windows_wheels:
    runs-on: windows-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-expat
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-curl-winssl
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-gcc

      - name: Checkout PlutoBook
        uses: actions/checkout@v4
        with:
          repository: plutoprint/plutobook
          path: plutobook
      - name: Build PlutoBook
        run: |
          cd plutobook
          meson setup build \
            --prefix='${{ github.workspace }}/plutobook-win-x64' \
            --buildtype=release \
            --wrap-mode=nodownload \
            --prefer-static \
            -Dcpp_args='-DCAIRO_WIN32_STATIC_BUILD -DCURL_STATICLIB -DU_STATIC_IMPLEMENTATION'
          meson install -C build --strip

      - name: Copy build dependencies
        run: |
          sed -i '/^Requires\.private/d' plutobook-win-x64/lib/pkgconfig/plutobook.pc
          cp -v /mingw64/bin/pkgconf.exe plutobook-win-x64/bin
          cp -v /mingw64/bin/libpkgconf*.dll plutobook-win-x64/bin
          cp -v /mingw64/bin/libgcc*.dll plutobook-win-x64/bin
          cp -v /mingw64/bin/libstdc++*.dll plutobook-win-x64/bin
          cp -v /mingw64/bin/libwinpthread*.dll plutobook-win-x64/bin

      - name: Upload PlutoBook build
        uses: actions/upload-artifact@v4
        with:
          name: plutobook-win-x64
          path: plutobook-win-x64/

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BUILD: cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 cp313-win_amd64 cp314-win_amd64
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_ENVIRONMENT_WINDOWS: |
            PKG_CONFIG='${{ github.workspace }}/plutobook-win-x64/bin/pkgconf.exe'
            PKG_CONFIG_PATH='${{ github.workspace }}/plutobook-win-x64/lib/pkgconfig'
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            delvewheel repair -vv -w {dest_dir} {wheel} --add-path ${{ github.workspace }}/plutobook-win-x64/bin
          CIBW_TEST_COMMAND: >
            python -c "import plutoprint; print(plutoprint.__build_info__)"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-windows-wheels
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BUILD: |
            cp310-macosx_universal2
            cp311-macosx_universal2
            cp312-macosx_universal2
            cp313-macosx_universal2
            cp314-macosx_universal2
          CIBW_TEST_COMMAND: >
            python -c "import plutoprint; print(plutoprint.__build_info__)"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-macos-wheels
          path: ./wheelhouse/*.whl
          
  upload_pypi:
    needs: [build_sdist, build_linux_wheels, build_windows_wheels, build_macos_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: cibw-*
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
